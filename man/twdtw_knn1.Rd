% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train.R
\name{twdtw_knn1}
\alias{twdtw_knn1}
\title{Train a KNN-1 TWDTW model}
\usage{
twdtw_knn1(
  x,
  y,
  time_weight,
  cycle_length,
  time_scale,
  smooth_fun = approx_gam_spline,
  start_column = "start_date",
  end_column = "end_date",
  label_colum = "label",
  sampling_freq = NULL,
  ...
)
}
\arguments{
\item{x}{A three-dimensional stars object (x, y, time) with bands as attributes.}

\item{y}{An sf object with the coordinates of the training points.}

\item{time_weight}{A numeric vector with length two (steepness and midpoint of logistic weight) or a function.
See details in \link[twdtw]{twdtw}.}

\item{cycle_length}{The length of the cycle, e.g. phenological cycles. Details in \link[twdtw]{twdtw}.}

\item{time_scale}{Specifies the time scale for the observations. Details in \link[twdtw]{twdtw}.}

\item{smooth_fun}{Either NULL or a function specifying how to reduce samples of the same label.
Default uses Generalized Additive Models (GAM) with cubic regression splines create a temporal pattern for each label. See details.}

\item{start_column}{Name of the column in y that indicates the start date. Default is 'start_date'.}

\item{end_column}{Name of the column in y that indicates the end date. Default is 'end_date'.}

\item{label_colum}{Name of the column in y containing land use labels. Default is 'label'.}

\item{sampling_freq}{The time frequency for sampling, including the unit (e.g., '16 day').
If NULL, the function will infer the frequency. This parameter is only used if \code{smooth_fun} is provided.}

\item{...}{Additional arguments passed to \link[twdtw]{twdtw}.}
}
\value{
A 'twdtw_knn1' model containing the trained model information and the data used.
}
\description{
This function prepares a KNN-1 model with the Time Warp Dynamic Time Warping (TWDTW) algorithm.
}
\details{
If \code{smooth_fun} is NULL, the KNN-1 model will retain all training samples.

If a custom smoothing function is passed to \code{smooth_fun}, the function will be used to
resample values of samples sharing the same label (land cover class). If no function is provided,
the default method uses Generalized Additive Models (GAM) with cubic regression splines.

The custom smoothing function takes two or three numeric vectors as arguments and return a single numeric vector:
\itemize{
\item The first argument represents the independent variable (typically time).
\item The second argument represents the dependent variable (e.g., band values) corresponding to each coordinate in the first argument.
\item Optional. The third argument specifies the locations (e.g., times) where interpolation predictions should be made.
}
See the examples section for further clarity.

Smooting the samples can significantly reduce the processing time for prediction using \code{twdtw_knn1} model.
}
\examples{
\dontrun{

# Read training samples
samples_path <-

samples <- st_read(samples_path, quiet = TRUE)

# Get satellite image time sereis files
tif_path <- system.file("mato_grosso_brazil", package = "dtwSat")
tif_files <- dir(tif_path, pattern = "\\\\.tif$", full.names = TRUE)

# Get acquisition dates
acquisition_date <- regmatches(tif_files, regexpr("[0-9]{8}", tif_files))
acquisition_date <- as.Date(acquisition_date, format = "\%Y\%m\%d")

# Create a 3D datacube
dc <- read_stars(tif_files,
                 proxy = FALSE,
                 along = list(time = acquisition_date),
                 RasterIO = list(bands = 1:6))
dc <- st_set_dimensions(dc, 3, c("EVI", "NDVI", "RED", "BLUE", "NIR", "MIR"))
dc <- split(dc, c("band"))

# Create a knn1-twdtw model
m <- twdtw_knn1(x = dc,
                y = samples,
                cycle_length = 'year',
                time_scale = 'day',
                time_weight = c(steepness = 0.1, midpoint = 50))

print(m)

# Visualize model patterns
plot(m)

# Classify satellite images
system.time(lu <- predict(dc, model = m))

# Visualise land use classification
ggplot() +
  geom_stars(data = lu) +
  theme_minimal()


# Create a knn1-twdtw model with custom smoothing function 

m <- twdtw_knn1(x = dc,
                y = samples,
                cycle_length = 'year',
                time_scale = 'day',
                time_weight = c(steepness = 0.1, midpoint = 50),
                smooth_fun = function(x, y) tapply(y, x, mean))

plot(m)

}
}
